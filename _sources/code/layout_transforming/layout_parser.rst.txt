=============
layout_parser
=============

.. py:function:: most_frequent(column)

   Returns the most frequent value in the column. If the column is empty, returns "empty". If the most frequent value is "misc" and the second most frequent is "price", returns "price".

   :param column: The column to find the most frequent value in.
   :type column: pandas.Series
   :return: The most frequent value in the column.
   :rtype: str


.. py:function:: column_type(column, wide=False, origins=None, return_prob=False, version_row=None)

   Determines the type of the column based on the values it contains.

   :param column: The column to determine the type of.
   :type column: pandas.Series
   :param wide: If True, the function will consider the column as wide.
   :type wide: bool
   :param origins: The origins of the values in the column.
   :type origins: list
   :param return_prob: If True, the function will return the probability of the column type.
   :type return_prob: bool
   :param version_row: The row that contains the version information.
   :type version_row: int
   :return: The type of the column.
   :rtype: str


.. py:function:: find_column(table, label)

   Finds the column in the table that contains the specified label.

   :param table: The table to find the column in.
   :type table: pandas.DataFrame
   :param label: The label to find in the table.
   :type label: str
   :return: The column that contains the label.
   :rtype: str


.. py:function:: get_column_to_split(df_labels, df_probabilities, type_to_weight)

   Determines which column to split based on the labels, probabilities, and weights.

   :param df_labels: The labels of the columns.
   :type df_labels: pandas.DataFrame
   :param df_probabilities: The probabilities of the labels.
   :type df_probabilities: pandas.DataFrame
   :param type_to_weight: The weights of the types.
   :type type_to_weight: dict
   :return: The column to split.
   :rtype: str


.. py:function:: find_versions(labels, wide_models=False)

   Finds the versions in the labels.

   :param labels: The labels to find the versions in.
   :type labels: pandas.DataFrame
   :param wide_models: If True, the function will consider the models as wide.
   :type wide_models: bool
   :return: The row of the version, the columns of the version, and the columns without the version.
   :rtype: tuple


.. py:function:: find_partial_versions(labels)

   Finds the partial versions in the labels.

   :param labels: The labels to find the partial versions in.
   :type labels: pandas.DataFrame
   :return: The title of the version, the content of the version, and the row of the version.
   :rtype: tuple


.. py:function:: find_empty(labels, clean_threshold)

   Finds the rows and columns in the labels that are not empty.

   :param labels: The labels to find the non-empty rows and columns in.
   :type labels: pandas.DataFrame
   :param clean_threshold: The threshold to consider a row or column as clean.
   :type clean_threshold: int
   :return: The non-empty rows and columns.
   :rtype: tuple


.. py:function:: find_spliters(labels, title_row, loose_split=False)

   Finds the splitters in the labels.

   :param labels: The labels to find the splitters in.
   :type labels: pandas.DataFrame
   :param title_row: The row that contains the title.
   :type title_row: int
   :param loose_split: If True, the function will consider the split as loose.
   :type loose_split: bool
   :return: The column of the splitter, the map of the splitter, and the type of the splitter.
   :rtype: tuple


.. py:function:: find_technical_spliters(labels)

   Finds the technical splitters in the labels.

   :param labels: The labels to find the technical splitters in.
   :type labels: pandas.DataFrame
   :return: The column of the technical splitter and the rows of the technical splitter.
   :rtype: tuple


.. py:function:: find_title(labels)

   Finds the row that contains the title in the labels.

   :param labels: The labels to find the title in.
   :type labels: pandas.DataFrame
   :return: The row that contains the title.
   :rtype: int


.. py:function:: find_first_price(labels)

   Finds the first row that contains the price in the labels.

   :param labels: The labels to find the price in.
   :type labels: pandas.DataFrame
   :return: The first row that contains the price.
   :rtype: int


.. py:function:: find_previous_title(previous_table, after_transform=True)

   Finds the title in the previous table.

   :param previous_table: The previous table to find the title in.
   :type previous_table: pandas.DataFrame
   :param after_transform: If True, the function will consider the table after transformation.
   :type after_transform: bool
   :return: The values and labels of the title.
   :rtype: list


.. py:function:: find_to_merge(labels, wide=False, duplicate_search=False)

   Finds the columns to merge in the labels.

   :param labels: The labels to find the columns to merge in.
   :type labels: pandas.DataFrame
   :param wide: If True, the function will consider the labels as wide.
   :type wide: bool
   :param duplicate_search: If True, the function will search for duplicates.
   :type duplicate_search: bool
   :return: The columns to merge and their types.
   :rtype: tuple


.. py:function:: find_number(text)

   Finds the largest number in the text.

   :param text: The text to find the number in.
   :type text: str
   :return: The largest number in the text.
   :rtype: int


.. py:function:: find_missing_column(labels, wide)

   Finds the missing column in the labels.

   :param labels: The labels to find the missing column in.
   :type labels: pandas.DataFrame
   :param wide: If True, the function will consider the labels as wide.
   :type wide: bool
   :return: The type of the missing column, the column of the missing column, and the row of the missing column.
   :rtype: tuple


.. py:function:: apply_middle_symetry(items: list)

   Applies middle symmetry to the items.

   :param items: The items to apply middle symmetry to.
   :type items: list
   :return: The items after applying middle symmetry and their origins.
   :rtype: tuple
